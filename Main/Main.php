<?phpnamespace Main;use DateTime;use mysqli;//use PHPMailer;use stdClass;class Main{    public $banco = "";    public $nombre = array(        '0175' => "BANCO BICENTENARIO",        '0174' => "BANCO BANPLUS",        '0151' => "BANCO FONDO COMUN",    );    public $codBanco = '';    public $_tablaTRX = array(        '0175' => 'dt_clientes_liquidacion',        '0174' => 'dt_banplus_liquidacion',        '0151' => 'dt_bfc_liquidacion'    );    private $logFile = "system.log";    public $afiliadosFile = "AFILIADOS.txt";    public $_program = "";    public $route = '';    public $_hoy = '';    public $ds = DIRECTORY_SEPARATOR;    private $posicion = 0;    private $debug = false;    private $indice = '';    public $tabla = '';    public $campos = '';    public $errorMsg = "";    public $wh = '';    //DATE BASE CONFIG    private $_host = array(        'DESARROLLO' => '172.16.10.23',        'CALIDAD' => '172.16.10.24',        'PRODUCCION' => '172.16.11.13'    );    private $_username = array(        'DESARROLLO' => 'ubiimovilsystem',        'CALIDAD' => 'ubiiwatcher',        'PRODUCCION' => 'ubiiwatcher'    );    private $_password = array(        'DESARROLLO' => 'ub11c3nt0523',        'CALIDAD' => 'ub11c3nt0524',        'PRODUCCION' => 'ub11d3b14n13'    );    private $_database = 'comcas_db_merchant';    public $_connection;    //SMTP CONFIG    private $_SMTPHost = 'just64.justhost.com';    private $_mailAddress = 'no-reply@ubiipagos.com';    private $_SMTPUsername = 'no-reply@ubiipagos.com';    private $_SMTPPassword = 'Ubiipagos.2017';    //SFTP CONFIG    private $_FTPServer = array(        'DESARROLLO' => '10.112.23.2',        'CALIDAD' => '10.112.23.42',        'PRODUCCION' => '10.112.23.43',    );    private $_FTPUsername = array(        'DESARROLLO' => 'USUBIPGO',        'CALIDAD' => 'USUBIPGO',        'PRODUCCION' => 'USUBIPGO',    );    private $_FTPPassword = array(        'DESARROLLO' => 'zxcv1234',        'CALIDAD' => 'Hr7Kv9prd',        'PRODUCCION' => 'ImHp18VcY',    );    private $_SFTPRemoteFile = '';    private $_FTPPort = 22;    public $_localComFiles = '/var/www/LQUBIIPAGOS';    public function __construct($amb)    {        $this->setAmbiente($amb);        $this->_connection = new mysqli($this->_host[$amb], $this->_username[$amb], $this->_password[$amb], $this->_database);        if (mysqli_connect_error()) {            trigger_error("Failed to conenct to MySQL: " . mysqli_connect_error(), E_USER_ERROR);        } else {            mysqli_set_charset($this->_connection, "UTF8");            return $this->_connection;        }    }    /**     * @return string     */    public function getHoy()    {        $hoy = new \DateTime();        $this->setHoy($hoy->format('Y-m-d'));        return $this->_hoy;    }    /**     * @param string $hoy     */    public function setHoy($hoy)    {        $this->_hoy = $hoy;    }    /**     * @return string     */    public function getBanco()    {        return $this->banco;    }    /**     * @param string $codBanco     */    public function setBanco($banco)    {        $this->banco = $banco;    }    /**     * @return string     */    public function getCodBanco()    {        return $this->codBanco;    }    /**     * @param string $codBanco     */    public function setCodBanco($codBanco)    {        $this->codBanco = $codBanco;    }    /**     * @return string     */    public function getProgram()    {        return $this->_program;    }    /**     * @param string $program     */    public function setProgram($program)    {        $this->_program = $program;    }    /**     * @return string     */    public function getAmbiente()    {        return $this->ambiente;    }    /**     * @param string $ambiente     */    public function setAmbiente($ambiente)    {        $this->ambiente = $ambiente;    }    /**     * @return string     */    public function getSFTPRemoteFile()    {        return $this->_SFTPRemoteFile;    }    /**     * @param string $SFTPRemoteFile     */    public function setSFTPRemoteFile($SFTPRemoteFile)    {        $this->_SFTPRemoteFile = $SFTPRemoteFile;    }    /**     * @param string $route     */    public function setRoute($route)    {        $this->route = $route;    }    /**     * @return string     */    public function getRoute()    {//        $this->route = DIRECTORY_SEPARATOR . 'var' . DIRECTORY_SEPARATOR . 'www' . DIRECTORY_SEPARATOR . 'LQUBIIPAGOS' . DIRECTORY_SEPARATOR . '0175' . DIRECTORY_SEPARATOR . 'LIQUIDACION';        return $this->route;    }    /**     * @return bool     */    public function isDebug()    {        return $this->debug;    }    /**     * @param bool $debug     */    public function setDebug($debug)    {        $this->debug = $debug;    }    public function getBDConection()    {        $this->_connection = new mysqli($this->_host, $this->_username, $this->_password, $this->_database);        if (mysqli_connect_error()) {            trigger_error("Failed to conenct to MySQL: " . mysqli_connect_error(), E_USER_ERROR);        } else {            mysqli_set_charset($this->_connection, "UTF8");            return $this->_connection;        }    }    public function DaysInMonth($mes, $year)    {        $m = $mes;        $y = $year;        $numDays = cal_days_in_month(CAL_GREGORIAN, $m, $y);        return $numDays;    }    /**     * Suma o Resca la cantidad enviada a la fecha actual y devuelve una nueva fecha.     * Fecha: 21-09-2016 Luis Perez     * @global type $db     * @param type $oper = + o -     * @param type $cantidad = cantidad de dias     * @param type $tipoFecha = day, month, year     * @param type $format = formato de la fecha     */    public function add_days($oper, $cantidad, $tipoFecha, $format)    {        $date = new DateTime();        $time = sprintf("%s %s %s", $oper, $cantidad, $tipoFecha);        $fecha = date($format, strtotime($time));        return $fecha;    }    public function getLanguage($idioma)    {        $file = realpath(dirname(dirname(dirname(__FILE__)))) . $this->ds . 'app' . $this->ds . 'resources' . $this->ds . 'lang' . $this->ds . $idioma . ".xml";        $lang = "";        if (file_exists($file)) {            $lang = simplexml_load_file($file);        } else {            $lang = 'Error no se consigue el archivo: ' . $file;        }        return $lang;    }    public function initConsoleTable($config)    {        $tbl = new Console_Table($config);        return $tbl;    }    public function LOG($accion, $message)    {        $tabla = 'sys_logs';        $add = $this->add(array(            'usuario' => $_SESSION['cliente_ID'],            'ip' => $_SESSION['session_ip'],            'accion' => $accion,            'sessionId' => $_SESSION['session_key'],            'message' => $message        ), $tabla);    }    public function sessions($flag)    {        $ok = false;        $tabla = 'sys_sessions';        if (isset($_SESSION['cliente_ID']) && $_SESSION['cliente_ID'] != "") {            switch ($flag) {                case 'VALIDATE':                    //VALIDAR VIGENCIA DE LA SESSION                    $hoy = new DateTime();                    $diferencia = $this->get_diff_date($hoy->format('Y-m-d H:i:s'), $_SESSION['ultimo_ingreso'], '', true);                    $key = $this->get_info($tabla, 'session_key', "WHERE cliente_ID='" . $_SESSION['cliente_ID'] . "'");                    if ($_SESSION['session_key'] == $key) {                        if ($diferencia['year'] > 0 || $diferencia['month'] > 0 || $diferencia['hour'] > 0 || $diferencia['minutes'] > 30) {                            $this->edit(array('session_key' => '{NULL}'), $tabla, "WHERE cliente_ID='" . $_SESSION['cliente_ID'] . "'");                            $_SESSION['expired'] = true;                            $_SESSION['authenticated'] = false;                        } else {                            $this->edit(array('session_fecha' => $hoy->format('Y-m-d H:i:s')), $tabla, "WHERE cliente_ID='" . $_SESSION['cliente_ID'] . "'");                            $_SESSION['ultimo_ingreso'] = $hoy->format('Y-m-d H:i:s');                            $_SESSION['expired'] = false;                        }                    } else {                        $this->edit(array('session_key' => '{NULL}'), $tabla, "WHERE cliente_ID='" . $_SESSION['cliente_ID'] . "'");                        $_SESSION['expired'] = true;                        $_SESSION['authenticated'] = false;                    }                    break;                case 'LOG':                    $this->LOG('login', 'Entrada al sistema');                    break;                case 'SEARCH':                    $existe = $this->get_info($tabla, 'session_ID,session_key', "WHERE cliente_ID='" . $_SESSION['cliente_ID'] . "'");                    if ($existe['session_ID'] <> 0) {                        if ($existe['session_key'] != "") {                            //SESION DUPLICADA                            $ok = true;                        } else {                            //SESION NO DUPLICADA                            $this->edit(array(                                'session_key' => $_SESSION['session_key'],                                'session_fecha' => $_SESSION['ultimo_ingreso']                            ), $tabla, "WHERE cliente_ID='" . $_SESSION['cliente_ID'] . "'");                            $ok = false;                        }                    } else {                        $this->add(array(                            'cliente_ID' => $_SESSION['cliente_ID'],                            'session_key' => $_SESSION['session_key']                        ), $tabla);                        $ok = false;                    }                    break;                case 'CREATE':                    $this->add(array(                        'cliente_ID' => $_SESSION['cliente_ID'],                        'session_key' => $_SESSION['session_key']                    ), $tabla);                    break;                case 'DESTROY':                    $this->edit(array('session_key' => '{NULL}'), $tabla, "WHERE cliente_ID='" . $_SESSION['cliente_ID'] . "'");                    $this->LOG('logout', 'Salida del sistema: ' . $_SESSION['cliente_nombre']);                    session_destroy();                    break;            }        } else {            $_SESSION['expired'] = true;            $_SESSION['authenticated'] = false;            $ok = false;        }        return $ok;    }    public function randomPassword($length = 8, $flags = 'ALPHANUMERIC')    {        switch ($flags) {            case 'ALPHANUMERIC':                $alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890';                break;            case 'NUMERIC':                $alphabet = '1234567890';                break;            case 'ALPHA':                $alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';                break;        }        $pass = array(); //remember to declare $pass as an array        $alphaLength = strlen($alphabet) - 1; //put the length -1 in cache        for ($i = 0; $i < $length; $i++) {            $n = rand(0, $alphaLength);            $pass[] = $alphabet[$n];        }        return implode($pass); //turn the array into a string    }    public function get_diff_date($actual, $date, $format, $array = false)    {//        %Y años %m meses %d days %H horas %i minutos %s segundos        $elapsed = "";        if ($actual != "") {            $datetime1 = new DateTime($actual);        } else {            $datetime1 = new DateTime();        }        $datetime2 = new DateTime($date);        $interval = $datetime1->diff($datetime2);        $elapsed = $interval->format($format);        $interval->format($format);        if ($array === true) {            $elapsed = array(                'year' => $interval->format('%Y'),                'month' => $interval->format('%m'),                'day' => $interval->format('%d'),                'hour' => $interval->format('%H'),                'minutes' => $interval->format('%i'),                'second' => $interval->format('%s'),            );        }        return $elapsed;    }    public function search_in_string($string, $search, $flag = "")    {        if ($flag != "") {            switch ($flag) {                case 'RIF':                    $consulta = preg_match("/^([VEJPG]{1}[\-]{1,2})([0-9]{9}$)/", $string);//                    print_r($string);//                    var_dump($consulta);                    if ($consulta) {                        $digitos = str_split($string);                        $digitos[9] *= 2;                        $digitos[8] *= 3;                        $digitos[7] *= 4;                        $digitos[6] *= 5;                        $digitos[5] *= 6;                        $digitos[4] *= 7;                        $digitos[3] *= 2;                        $digitos[2] *= 3;                        // Determinar dígito especial según la inicial del RIF                        // Regla introducida por el SENIAT                        switch ($digitos[0]) {                            case 'V':                                $digitoEspecial = 1;                                break;                            case 'E':                                $digitoEspecial = 2;                                break;                            case 'C':                            case 'J':                                $digitoEspecial = 3;                                break;                            case 'P':                                $digitoEspecial = 4;                                break;                            case 'G':                                $digitoEspecial = 5;                                break;                        }                        $suma = (array_sum($digitos) - $digitos[10]) + ($digitoEspecial * 4);                        $residuo = $suma % 11;                        $resta = 11 - $residuo;                        $digitoVerificador = ($resta >= 10) ? 0 : $resta;                        if ($digitoVerificador != $digitos[10]) {                            return false;                        } else {                            return true;                        }                    } else {                        return false;                    }                    break;                case 'CORREO':                    $consulta = preg_match('/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,})$/i', $string);                    if ($consulta) {                        return true;                    } else {                        return false;                    }                    break;                case 'PASSWORD':                    $consulta = preg_match('/^(?=.*\d)(?=.*[@#\-_$%^&+=§!\?])(?=.*[a-z])(?=.*[A-Z])[0-9A-Za-z@#\-_$%^&+=!\?]{8,12}$/', $string);                    if ($consulta) {                        return true;                    } else {                        return false;                    }                    break;                default:                    $consulta = preg_match($search, $string);                    if ($consulta) {                        return true;                    } else {                        return false;                    }                    break;            }        } else {            $consulta = preg_match($search, $string);            if ($consulta) {                return true;            } else {                return false;            }        }    }    public function build_table($array, $class = "")    {        // start table        if ($class == "") {            $html = '<table class="table table-bordered table-responsive">';        } else {            $html = '<table class="' . $class . '">';        }        // header row        $html .= '<thead>';        $html .= '<tr>';        foreach ($array[0] as $key => $value) {            $html .= '<th>' . $key . '</th>';        }        $html .= '</tr>';        $html .= '</thead>';        $html .= '<tbody>';        // data rows        foreach ($array as $key => $value) {            $html .= '<tr>';            foreach ($value as $key2 => $value2) {                $html .= '<td>' . $value2 . '</td>';            }            $html .= '</tr>';        }        // finish table and return it        $html .= '</tbody>';        $html .= '</table>';        return $html;    }    public function parser($cod, $row)    {        $this->set_pos(0);        switch ($cod) {            case '0175':                $data = array(                    'tipo_cuenta' => $this->get_pos($row, 1, false),                    'fecha_proceso' => $this->get_pos($row, 6, false, false, true),                    'tipo_nota' => $this->get_pos($row, 3, false),                    'nro_cuenta' => $this->get_pos($row, 20, false),                    'referencia' => $this->get_pos($row, 8, false),                    'monto' => $this->get_pos($row, 11, false, true),                    'banco_afiliado' => $this->get_pos($row, 8, false, false, false, 2),                    'lote' => $this->get_pos($row, 3, false, false, false, 1),                    'terminal' => $this->get_pos($row, 4, false, false, false),                    'status' => 1,                );                break;            case '0174':            case '0151':                $data = array(                    'tipo_cuenta' => $this->get_pos($row, 1, false),                    'nro_cuenta' => $this->get_pos($row, 20, false),                    'fecha_proceso' => $this->get_pos($row, 8, false, false, true),                    'tipo_nota' => $this->get_pos($row, 2, false),                    'referencia' => $this->get_pos($row, 8, false),                    'monto' => $this->get_pos($row, 15, false, true),                    'banco_afiliado' => $this->get_pos($row, 8, false, false, false),                    'terminal' => $this->get_pos($row, 3, false, false, false),                    'lote' => $this->get_pos($row, 4, false, false, false),                    'status' => 1,                );                break;        }        return $data;    }    public function formatDate($date)    {        $array = explode('-', $date);        $y = substr($array[0], 2, 2);        $m = $array[1];        $d = $array[2];        $date = $d . $m . $y;        return $date;    }    public function formatSizeUnits($bytes)    {        if ($bytes >= 1073741824) {            $bytes = number_format($bytes / 1073741824, 2) . ' GB';        } elseif ($bytes >= 1048576) {            $bytes = number_format($bytes / 1048576, 2) . ' MB';        } elseif ($bytes >= 1024) {            $bytes = number_format($bytes / 1024, 2) . ' KB';        } elseif ($bytes > 1) {            $bytes = $bytes . ' bytes';        } elseif ($bytes == 1) {            $bytes = $bytes . ' byte';        } else {            $bytes = '0 bytes';        }        return $bytes;    }    public function get_txt_date($string, $cantidad)    {        try {            if ($cantidad > 6) {                $d = substr($string, 0, 2);                $m = substr($string, 2, -4);                $y = substr($string, 4, 8);                $date = $y . "-" . $m . "-" . $d;            } else {                $d = substr($string, 0, 2);                $m = substr($string, 2, -2);                $y = substr($string, 4, 6);                $date = "20" . $y . "-" . $m . "-" . $d;            }//            $f = new DateTime($date);//            return $f->format($format);            return $date;        } catch (Exception $ex) {            return null;        }    }    public function get_pos($data, $cantidad, $print = false, $numeric = false, $date = false, $filler = 0)    {        $value = trim(substr($data, $this->posicion, $cantidad));        if ($numeric) {            $value = intval($value) / 100;        }        if ($print) {            if ($numeric) {                $value = number_format($value, 2, ',', '.');            }            if ($date) {                $value = self::get_txt_date($value, $cantidad);            }            $tpl = "<td>{{line}}</td>";            $tmp = Main::get_tpl(array(                'line' => $value            ), $tpl);            if ($filler > 0) {                $this->posicion += ($cantidad + $filler);            } else {                $this->posicion += $cantidad;            }            return $tmp;        } else {            if ($date) {                $value = self::get_txt_date($value, $cantidad);            }            if ($filler > 0) {                $this->posicion += ($cantidad + $filler);            } else {                $this->posicion += $cantidad;            }            return $value;        }    }    public function set_pos($pos = 0)    {        $this->posicion = $pos;    }    public function drawDate()    {        $date = date('d/m/Y H:i:s');        $hoy = ' [' . $date . '] ';        return $hoy;    }    public function logger($output)    {        try {            $msg = '';            $dir = realpath(dirname(dirname(dirname(__FILE__)))) . $this->ds . $this->logFile;            $date = date('d/m/Y H:i:s');            $msg = ' [' . $date . '] - ' . $output . PHP_EOL;            if ($this->debug) {                echo $msg;            } else {                file_put_contents($dir, $msg, FILE_APPEND);            }        } catch (Exception $exc) {        }    }    public function table_logger($header, $data)    {        try {            $tbl = new Console_Table();            $tbl->setHeaders($header);            $tbl->addRow($data);            $tbl->addRow(array('C', 1970));            $tbl->addRow(array('C++', 1983));            echo $tbl->getTable();            $msg = '';            $dir = realpath($_SERVER['DOCUMENT_ROOT']) . $this->ds . $this->logFile;            $date = date('d/m/Y H:i:s');//            $msg = ' [' . $date . '] - ' . $output . PHP_EOL;            if ($this->debug) {                echo $msg;            } else {                file_put_contents($dir, $msg, FILE_APPEND);            }        } catch (Exception $exc) {        }    }    /**     * Ejecuta la consulta a la base de datos, y retorna el resultado!     * FEcha: 04-06-2013     *     * @param string $query Consulta en la base de datos     * @return boolean veradedo o falso en caso de error(revisar la propiedad $this->errorMsg)     */    public function query($query, $transaction = false)    {        try {            $db = $this->_connection;            if ($query != "") {                if ($transaction) {                    mysqli_query($db, 'START TRANSACTION;');                    $result = mysqli_query($db, $query);                } else {                    $result = mysqli_query($db, $query);                }                if ($result != false) {                    ($transaction) ? mysqli_query($db, 'COMMIT;') : '';                    return $result;                } else {                    ($transaction) ? mysqli_query($db, 'ROLLBACK;') : '';                    throw new Exception("Error BD: - " . mysqli_error($db) . " - SQL: $query", mysqli_errno($db));                    return false;                }            } else {                throw new Exception("Error BD: la cadena de consulta no puede ser null", mysqli_errno($db));                return false;            }        } catch (Exception $exc) {            echo $exc->getMessage();        }    }    /**     * Ingresa un registro en la tabla para las dat_tables_data     *     * @return boolean     */    function add($data = "", $tabla = "", $condicion = "", $lastID = false, $debug = false)    {        try {            $db = $this->_connection;            if (!empty($tabla))                $this->tabla = $tabla;            //TODO completar el codigo de add de la clase dat_tables_data            $sql = $this->get_sql("insert", $data, $condicion);            //Main::LOG("SQL", $sql);            if ($debug) {                echo $sql;            }            if ($sql != "")                mysqli_query($db, $sql) or $this->errorMsg .= mysqli_error($db) . " <br>$sql";            if ($lastID) {                $lastID = mysqli_insert_id($db);                return $lastID;            } else {                return ($this->errorMsg == "") ? true : false;            }        } catch (Exception $exc) {            echo $exc->getTraceAsString();        }    }    /**     *  Modifica un registro de la tabla de la dat_tables_data     *     * @return <type>     */    function edit($data = "", $tabla = "", $condicion = "", $debug = false)    {        try {            $db = $this->_connection;            if (!empty($tabla))                $this->tabla = $tabla;            //TODO completar el codigo de edicion de la clase dat_tables_data            $sql = $this->get_sql("update", $data, $condicion);//            Main::LOG("SQL", $sql);            if ($debug) {                echo $sql;            }            if ($sql != "")                mysqli_query($db, $sql) or $this->errorMsg .= mysqli_error($db);            return ($this->errorMsg == "") ? true : false;        } catch (Exception $exc) {            echo $exc->getTraceAsString();        }    }    /**     * Elimina un registro de la tabla de la dat_tables_data     * Modificado el 14-07-2015     * Acepta 2 nuevos parametros opcionales, estos son el nombre de la tabla     * para eliminar el registro y la condicion del registro     * @return <type>     */    function del($tabla = "", $condicion = "")    {        try {            $db = $this->_connection;            if (!empty($tabla) && !empty($condicion)) {                $sql = "DELETE FROM $tabla $condicion";                return $this->query($sql);            } else {                //TODO completar el codigo de borrado de la clase dat_tables_data                if ($this->val($this->indice) != "") {                    $type = $this->get_field($this->indice);                    if (strpos($this->val($this->indice), ",") !== FALSE) {                        $t = explode(",", $this->val($this->indice));                        $this->wh = "";                        foreach ($t as $i => $id) {                            $this->wh .= sprintf("%s,", $this->GetSQLValueString($id, $type));                        }                        $this->wh = "WHERE $this->indice in (" . substr($this->wh, 0, strlen($this->wh) - 1) . ")";                    } else {                        $this->wh = sprintf("WHERE $this->indice = %s", $this->GetSQLValueString($this->val($this->indice), $type));                    }                    $sql = "DELETE FROM $this->tabla $this->wh";                    mysqli_query($db, $sql) or $this->errorMsg . mysqli_error($db);                }            }            return ($this->errorMsg == "") ? true : false;        } catch (Exception $exc) {            echo $exc->getTraceAsString();        }    }    /**     * Obtiene la Informacion de la tabla que se desea, retornando el campo enviado a la function mediante parametros     * Modificado el 27-10-2015     *  Al no encontrar ningun registro y en vez de retornar falso, retornara un arreglo con la firma del registro     *  con cada clave vacia     *     * @param <type> $tabla     * @param <type> $campos     * @param <type> $condicion     * @return <type>     */    public function get_info($tabla = null, $campos = null, $condicion = "", $debug = false)    {        $db = $this->_connection;        if (!empty($tabla)) {            if (is_array($campos)) {                $temp = "";                $sw = true;                foreach ($campos as $nombres) {                    if ($sw) {                        $temp .= $nombres;                        $sw = false;                    } else {                        $temp .= "," . $nombres;                    }                }            } else {                $temp = $campos;            }            if (strlen($condicion) > 0) {                if (strpos($condicion, " where ") < 0) {                    $condicion = " where " . $condicion;                }            }            $sql = sprintf("select %s from %s %s", $temp, $tabla, $condicion);            if ($debug) {                echo $sql . PHP_EOL;            }            $rs = mysqli_query($db, $sql) or die(mysqli_error($db));            if ($rs) {                if (mysqli_num_fields($rs) > 1) {                    $row = mysqli_fetch_assoc($rs);                    if (!$row) {                        $arr = array();                        for ($i = 0; $i < mysqli_num_fields($rs); $i++) {                            $t = mysqli_fetch_field($rs);                            $arr[$t->name] = "";                        }                        return $arr;                    }                    return $row;                } else {                    $row = mysqli_fetch_array($rs);                    return $row[0];                }                mysqli_free_result($rs);            } else {                throw new Exception(mysqli_error($db) . $sql);            }        }        return "";    }    /**     * Script para crear una tabla temporal     * 04-04-2017     * @version 1     * @param type $table     * @return string     */    public function mk_tempTable($table, $fields = "*", $condition = "")    {        $db = $this->_connection;        $newTable = "tmp_" . $table;        $sql = "DROP TABLE IF EXISTS $newTable";//        $this->query($sql);        mysqli_query($db, $sql) or die(mysqli_error($db));        $sql = "CREATE TEMPORARY TABLE $newTable LIKE $table";        mysqli_query($db, $sql) or die(mysqli_error($db));        $sql = sprintf('INSERT INTO %s SELECT %s FROM %s %s', $newTable, $fields, $table, $condition);        mysqli_query($db, $sql) or die(mysqli_error($db));        return $newTable;    }    /**     * Retorna un arreglo con los registros encontrados directamente     * desde una tabla, campos y condición a la base de datos     *     * Fecha: 2015     *     * @param string $tabla     * @param string $campos     * @param string $condicion opcional     * @param boolean $print     * @return array     */    public function get_data_ARRAY($tabla, $campos, $condicion = "", $print = false, $type = "assoc")    {        try {            $db = $this->_connection;            $arr = array();            $i = 0;            $sql = "SELECT $campos FROM $tabla $condicion;";            $rs = mysqli_query($db, $sql);            if (!$rs)                throw new Exception(mysqli_error($db) . " $sql");            switch ($type) {                case "row":                    while ($row = mysqli_fetch_row($rs)) {                        $arr[$i] = $row;                        $i++;                    }                    break;                case "array":                    while ($row = mysqli_fetch_array($rs)) {                        $arr[$i] = $row;                        $i++;                    }                    break;                default:                    while ($row = mysqli_fetch_assoc($rs)) {                        $arr[$i] = $row;                        $i++;                    }                    break;            }            if ($print) {                echo "<pre>";                print_r($arr);                echo "</pre>";            } else {                return ($arr);            }        } catch (Exception $exc) {            echo $exc->getTraceAsString();            echo $exc->getMessage();        }    }    /**     *  Like Jquery, to set or get spetials values from the top methods     * 1.0 : $_REQUEST,$_GET,$_POST     *     * @param <type> $field     * @param <type> $value     * @param <type> $method     * @return <type>     */    function val($field, $value = "", $method = "REQUEST")    {        if ($value == "") {            switch ($method) {                case 'REQUEST':                    return @$_REQUEST[$field];                    break;                case 'GET':                    return @$_GET[$field];                    break;                case 'POST':                    return @$_POST[$field];                    break;            }        } else {            switch ($method) {                case 'REQUEST':                    @$_REQUEST[$field] = $value;                    break;                case 'GET':                    @$_GET[$field] = $value;                    break;                case 'POST':                    @$_POST[$field] = $value;                    break;            }        }    }    function get_sql($function, $data = "", $condicion = "")    {        try {            $sql = "";            $this->wh = "";            switch ($function) {                case 'insert':                    if (!empty($data) && (is_array($data))) {                        $temp1 = "";                        $temp2 = "";                        foreach ($data as $fields => $value) {                            if ($value != "") {                                // TODO get type of field                                $temp1 .= sprintf("%s,", $fields);                                $temp2 .= sprintf("'%s',", $value);                            }                        }                        $temp1 = substr($temp1, 0, strlen($temp1) - 1);                        $temp2 = substr($temp2, 0, strlen($temp2) - 1);                        $sql = sprintf("INSERT INTO %s (%s) VALUES (%s);", $this->tabla, $temp1, $temp2);                    } else {                        /* @var $fs_tmp <type> */                        $fs_tmp = explode(",", $this->campos);                        $temp1 = "";                        $temp2 = "";                        /* @var $f <type> */                        foreach ($fs_tmp as $fs => $f) {                            $f = trim($f);                            if ((isset($_REQUEST[$f])) && ($_REQUEST[$f] != "")) {                                // TODO get type of field                                //$type = $this->get_field($f);                                $type = "text";                                $temp1 .= sprintf("%s,", $f);                                $temp2 .= sprintf("%s,", $this->GetSQLValueString($_REQUEST[$f], $type));                            }                        }                        $temp1 = substr($temp1, 0, strlen($temp1) - 1);                        $temp2 = substr($temp2, 0, strlen($temp2) - 1);                        $sql = sprintf("INSERT INTO %s (%s) VALUES (%s)", $this->tabla, $temp1, $temp2);                    }                    break;                case 'update':                    if (!empty($data) && (is_array($data))) {                        $temp1 = "";                        foreach ($data as $fields => $value) {                            if ($value != "") {                                // TODO get type of field                                $inicio = preg_match("/[^{]/", $value);                                $fin = preg_match("/[$\}]/", $value);//                                echo $value . PHP_EOL;//                                var_dump($inicio);//                                echo PHP_EOL;//                                var_dump($fin);//                                echo PHP_EOL;//                                echo $inicio;//                                echo $fin;////                                die();                                if ($inicio <> 0 AND $fin <> 0) {                                    $value = str_replace("{", '', $value);                                    $value = str_replace("}", '', $value);                                    $temp1 .= sprintf("%s=$value,", $fields);                                } else {                                    $temp1 .= sprintf("%s='$value',", $fields);                                }//                                $temp1 .= sprintf("%s='$value',", $fields);                            }                        }                        $temp1 = substr($temp1, 0, strlen($temp1) - 1);                        if (!empty($condicion)) {                            $this->wh = $condicion;                        } else {                            if ($this->wh != "") {                                $this->wh = substr($this->wh, 5);                                $this->wh .= "WHERE $this->indice = '" . $_REQUEST[$this->indice] . "' AND $this->wh";                            } else {                                $this->wh = "WHERE $this->indice = '" . $_REQUEST[$this->indice] . "'";                            }                        }                        $sql = sprintf("UPDATE %s SET %s %s ", $this->tabla, $temp1, $this->wh);                    } else {                        // $this->indice = strtolower($this->indice);                        if (isset($_REQUEST[$this->indice]) && ($_REQUEST[$this->indice] != "")) {                            $fs_tmp = explode(",", $this->campos);                            $temp1 = "";                            $temp2 = "";                            foreach ($fs_tmp as $fs => $f) {                                $f = trim($f);                                if (                                    (isset($_REQUEST[$f])) &&                                    ($_REQUEST[$f] != "") &&                                    ($f != $this->indice)                                ) {                                    $type = $this->get_field($f);                                    $temp1 .= sprintf("%s=%s, ", $f, $this->GetSQLValueString($_REQUEST[$f], $type));                                }                            }                            $temp1 = substr($temp1, 0, strlen($temp1) - 2);                            if (!empty($condicion)) {                                $this->wh = $condicion;                            } else {                                if ($this->wh != "") {                                    $this->wh = substr($this->wh, 5);                                    $this->wh .= "WHERE $this->indice = '" . $_REQUEST[$this->indice] . "' AND $this->wh";                                } else {                                    $this->wh = "WHERE $this->indice = '" . $_REQUEST[$this->indice] . "'";                                }                            }                            $sql = sprintf("UPDATE %s set %s %s ", $this->tabla, $temp1, $this->wh);                        }                    }                    break;            }            return $sql;        } catch (Exception $exc) {            echo $exc->getTraceAsString();        }    }    function get_field($field, $func = "type")    {        try {            return "text";////           $db = $this->_connection;//            if (!empty($field)) {//                $result = mysqli_query($db, "SELECT $field from $this->tabla LIMIT 1") or die(mysqli_error($db));//                $type = mysqli_field_type($result, 0);//                $name = mysqli_field_name($result, 0);//                $len = mysqli_field_len($result, 0);//                $flags = mysqli_field_flags($result, 0);//                $result = "";//                switch ($func) {//                    case 'type':return $type;//                        break;//                    case 'name':return $name;//                        break;//                    case 'len':return $len;//                        break;//                    case 'flags':return $flags;//                        break;//                }//            }        } catch (Exception $exc) {            echo $exc->getTraceAsString();        }    }    /**     *     * @param type $theValue     * @param type $theType     * @param type $theDefinedValue     * @param type $theNotDefinedValue     * @return type     */    function GetSQLValueString($theValue, $theType, $theDefinedValue = "", $theNotDefinedValue = "")    {        try {            $db = $this->_connection;            $theValue = get_magic_quotes_gpc() ? stripslashes($theValue) : $theValue;            $theValue = function_exists("mysqli_real_escape_string") ? mysqli_real_escape_string($db, $theValue) : mysqli_escape_string($db, $theValue);            switch ($theType) {                case "blob":                case "string":                case "text":                    $theValue = ($theValue != "") ? "'" . $theValue . "'" : "''";                    break;                case "long":                case "int":                    $theValue = ($theValue != "") ? intval($theValue) : "'0'";                    break;                case "double":                    $theValue = ($theValue != "") ? "'" . doubleval($theValue) . "'" : "'0'";                    break;                case "date":                case "datetime":                case "timestamp":                    $theValue = ($theValue != "") ? "'" . $theValue . "'" : "NULL";                    break;                case "defined":                    $theValue = ($theValue != "") ? $theDefinedValue : $theNotDefinedValue;                    break;            }            return $theValue;        } catch (Exception $exc) {            echo $exc->getTraceAsString();        }    }    public function sendSFTPfile($file, $program)    {        $amb = $this->getAmbiente();        switch ($program) {            case 'WATCH':                break;            case 'AFILIADOS':                $this->setSFTPRemoteFile('/QDLS/UBIIPAGO/UBIPAGO.TXT');                break;            case 'RECHAZOS'://                $this->setSFTPRemoteFile('/QDLS/UBIIPAGO/UBIPAGO.TXT');                break;            case 'GETFILE'://                $this->setSFTPRemoteFile('/QDLS/UBIIPAGO/UBIPAGO.TXT');                break;            case 'COMISIONES':                $this->setSFTPRemoteFile('/QDLS/UBIIPAGO/' . $file);                $file = $this->ds . 'var' . $this->ds . 'www' . $this->ds . 'BICENTENARIO' . $this->ds . 'UBIIWATCHER0175' . $this->ds . 'files' . $this->ds . 'COMISIONES' . $this->ds . $file;                break;            default:                return "debe indicar el tipo de programa";                break;        }//        echo $this->getSFTPRemoteFile();//        die();        // connect        $connection = ssh2_connect($this->_FTPServer[$amb], $this->_FTPPort);        if ($connection) {            $this->logger('Conexión Establecida, iniciando sesión Usuario: ' . $this->_FTPUsername[$amb]);            $login = ssh2_auth_password($connection, $this->_FTPUsername[$amb], $this->_FTPPassword[$amb]);            if ($login) {                $this->logger('Enviando ' . $file . " via SFTP al Host: " . $this->_FTPServer[$amb] . " Port: " . $this->_FTPPort);                // initialize sftp                $sftp = ssh2_sftp($connection);                // Upload file                $remote = $this->getSFTPRemoteFile();                $stream = fopen("ssh2.sftp://{$sftp}{$remote}", 'w+');                if ($stream) {                    $contents = file_get_contents($file);                    $write = fwrite($stream, $contents);                    if ($write) {                        $this->logger('Archivo ' . $file . " enviado a " . $remote);                        fclose($stream);                        return true;                    } else {                        fclose($stream);                        return "Hubo un problema al guardar el archivo: " . $remote;                    }                } else {                    return "Hubo un problema al abrir la ruta: " . $remote;                }            } else {                return "Hubo un problema al iniciar sesión Usuario: " . $this->_FTPUsername[$amb] . ' Clave:' . $this->_FTPPassword[$amb] . ' Host:' . $this->_FTPServer[$amb];            }        } else {            return "Hubo un problema al conectarse al Host: " . $this->_FTPServer[$amb] . ' Port: ' . $this->_FTPPort;        }    }    public function getSFTPfile($txt)    {        $resp = new stdClass();        $resp->ok = false;        $resp->files = array();        $amb = $this->getAmbiente();        $program = $this->getProgram();        $true = 0;        $false = 0;        $this->setSFTPRemoteFile('/QDLS/UBIIPAGO/');        // connect        $connection = ssh2_connect($this->_FTPServer[$amb], $this->_FTPPort);        if ($connection) {            $this->logger('Conexión Establecida, iniciando sesión Usuario: ' . $this->_FTPUsername[$amb]);            $login = ssh2_auth_password($connection, $this->_FTPUsername[$amb], $this->_FTPPassword[$amb]);            if ($login) {                foreach ($txt as $key => $t) {                    $this->logger('Buscando ' . $t . " via SFTP al Host: " . $this->_FTPServer[$amb] . " Port: " . $this->_FTPPort);                    // initialize sftp                    $sftp = ssh2_sftp($connection);                    // Get File                    $remote = $this->getSFTPRemoteFile() . $t;//                    $localhandle = fopen($this->_localComFiles . $this->ds . $this->getCodBanco() . $this->ds . 'LIQUIDACION' . $t, 'w+');                    $stream = opendir("ssh2.sftp://{$sftp}{$this->getSFTPRemoteFile()}");                    if ($stream) {                        $files = array();                        while (false !== ($file = readdir($stream))) {                            if ($file == "." || $file == "..")                                continue;                            $files[] = $file;                        }                        foreach ($files as $f) {                            if ($f == $t) {                                $this->logger('Copiando archivo: ' . $t);                                if ($program != "RECHAZOS") {                                    $get = ssh2_scp_recv($connection, $this->getSFTPRemoteFile() . $t, $this->_localComFiles . $this->ds . $this->getCodBanco() . $this->ds . 'LIQUIDACION' . $this->ds . $t);                                } else {                                    $get = ssh2_scp_recv($connection, $this->getSFTPRemoteFile() . $t, $this->_localComFiles . $this->ds . $this->getCodBanco() . $this->ds . 'RECHAZOS' . $this->ds . $t);                                }                                if (!$get) {                                    $this->logger('Hubo un erro al extraer el  archivo: ' . $t);                                    $false++;                                } else {                                    array_push($resp->files, $t);                                    $true++;                                    //LIMPIAR ARCHIVO DE RECHAZOS                                    $ruta = $this->getSFTPRemoteFile() . $t;                                    if ($program == "RECHAZOS") {                                        $fa = fopen("ssh2.sftp://{$sftp}{$ruta}", 'w+');                                        if ($fa) {                                            $w = fwrite($fa, " ");                                            if (!$w) {                                                fclose($fa);                                                return "Hubo un problema al limpiar el archivo de rechazos: " . $ruta;                                            }                                            fclose($fa);                                        } else {                                            return "Hubo un problema al abrir la ruta del archivo de rechazos: " . $ruta;                                        }                                    }                                }                            }                        }                    } else {                        return "Hubo un problema al abrir la ruta: " . $remote;                    }                }                if ($true == count($txt)) {                    $resp->ok = true;                }                return $resp;            } else {                return "Hubo un problema al iniciar sesión Usuario: " . $this->_FTPUsername[$amb] . ' Clave:' . $this->_FTPPassword[$amb] . ' Host:' . $this->_FTPServer[$amb];            }        } else {            return "Hubo un problema al conectarse al Host: " . $this->_FTPServer[$amb] . ' Port: ' . $this->_FTPPort;        }    }    /**     * Obtiene el html de un tpl     * el template en $tpl, debe tener la sintaxis de {{index}}     * u el valor de la clave debe estar el $data = array("index"=>valor)     */    public function get_tpl($data, $tpl)    {        $tpl_tmp = $tpl;        if (is_array($data) && $tpl != "") {            foreach ($data as $key => $value) {                $tpl_tmp = str_replace("{{" . $key . "}}", $value, $tpl_tmp);            }        }        return $tpl_tmp;    }    public function send_mail($config)    {        $tpl = "";        $file = dirname(dirname(dirname(__FILE__))) . $this->ds . 'app' . $this->ds . 'resources' . $this->ds . "template" . $this->ds . $config['template'] . ".php";        $rs = file_exists($file);        if ($rs) {            $f = fopen($file, 'r');            $tpl = fread($f, filesize($file));        }        $tmp = $this->get_tpl($config['body'], $tpl);        $amb = $this->getAmbiente();        $enviado = false;        $mail = new PHPMailer;        $mail->isSMTP();                                      // Set mailer to use SMTP        $mail->Host = $this->_SMTPHost;  // Specify main and backup SMTP servers        $mail->SMTPAuth = true;                               // Enable SMTP authentication        $mail->Username = $this->_SMTPUsername;                 // SMTP username        $mail->Password = $this->_SMTPPassword;                        // SMTP password        $mail->SMTPSecure = false;                            // Enable TLS encryption, `ssl` also accepted        $mail->Port = 26;                                    // TCP port to connect to        $mail->setFrom($this->_mailAddress, 'UBII PAGOS C.A.');        if (isset($config['error']) && $config['error'] === true) {            $mail->addAddress('incidencias@ubiipagos.com');     // Add a recipient        } else {            $mail->addAddress($config['address']);     // Add a recipient        }        $mail->Subject = $config['subject'];        $mail->CharSet = 'UTF-8';        if (isset($config['files']) && $config['files'] != "") {            $mail->addAttachment($config['files'], $config['fileName']);        }        $mail->MsgHTML($tmp);                                  // Set email format to HTML        if (!$mail->send()) {            $enviado = $mail->ErrorInfo;        } else {            $enviado = true;        }        return $enviado;    }    public function send_mail_informacion($config)    {        $tpl = "";        $file = dirname(dirname(dirname(__FILE__))) . $this->ds . 'app' . $this->ds . 'resources' . $this->ds . "template" . $this->ds . "informacion.php";        $rs = file_exists($file);        if ($rs) {            $f = fopen($file, 'r');            $tpl = fread($f, filesize($file));        }        $config['body'] = $this->get_tpl(array(            'empresa' => $config['empresa'],            'title' => $config['title'],            'nombre' => $config['nombre'],            'files' => $config['files'],            'telefono' => $config['telefono'],            'direccion' => $config['direccion'],            'msg' => '',        ), $tpl);        $amb = $this->getAmbiente();        $enviado = false;        $mail = new PHPMailer;        $mail->isSMTP();                                      // Set mailer to use SMTP        $mail->Host = $this->_SMTPHost;  // Specify main and backup SMTP servers        $mail->SMTPAuth = true;                               // Enable SMTP authentication        $mail->Username = $this->_SMTPUsername;                 // SMTP username        $mail->Password = $this->_SMTPPassword;                        // SMTP password        $mail->SMTPSecure = false;                            // Enable TLS encryption, `ssl` also accepted        $mail->Port = 26;                                    // TCP port to connect to        $mail->setFrom($this->_mailAddress, 'UBII PAGOS C.A.');        $mail->addAddress($config['address']);     // Add a recipient        $mail->Subject = $config['subject'];        $mail->CharSet = 'UTF-8';        $mail->MsgHTML($config['body']);                                  // Set email format to HTML        if (!$mail->send()) {            $enviado = $mail->ErrorInfo;        } else {            $enviado = true;        }        return $enviado;    }    public function create_result_report($fileName, $txt, $program)    {        $date = date('dmY');        switch ($this->getCodBanco()) {            case '0175':                $fileName = substr($fileName, 4, 2);                break;            case '0174':            case '0151':                $fileName = substr($fileName, 4, 2);                break;        }        switch ($program) {            case 'WATCH':                $name = "RP" . $fileName . " " . $date . '.txt';                break;            case 'AFILIADOS':                $name = "RPAFILIADOS " . $date . '.txt';                break;            case 'COMISIONES':                $name = "RPCOMISIONES" . $date . '.txt';                break;            case 'GETFILES':                $name = "RPGETFILES" . $date . '.txt';                break;            case 'RECHAZOS':                $name = "RPRECHAZOS" . $date . '.txt';                break;        }        $ruta = realpath(dirname(dirname(dirname(__FILE__)))) . $this->ds . 'files' . $this->ds . $program . $this->ds . 'REPORTES' . $this->ds . $name;        $cursor = fopen($ruta, "w+");        if ($cursor) {            fwrite($cursor, $txt);            fclose($cursor);            return $ruta;        } else {            return false;        }    }    public function create_comision_file($content)    {        $date = date('z');        $name = "COUBI" . sprintf("%03s", $date) . '.txt';        $ruta = realpath(dirname(dirname(dirname(__FILE__)))) . $this->ds . 'files' . $this->ds . 'COMISIONES' . $this->ds . $name;        $cursor = fopen($ruta, "w+");        if ($cursor) {            fwrite($cursor, $content);            fclose($cursor);            return $ruta;        } else {            return false;        }    }    public function create_afiliados_file($content)    {        $name = $this->afiliadosFile;        $ruta = realpath(dirname(dirname(dirname(__FILE__)))) . $this->ds . 'files' . $this->ds . 'AFILIADOS' . $this->ds . $name;        $cursor = fopen($ruta, "w+");        if ($cursor) {            fwrite($cursor, $content);            fclose($cursor);            return $ruta;        } else {            return false;        }    }}